// import java.util.*;
// class Solution {
//     public int[] solution(int n, int[][] roads, int[] sources, int destination) {
//         int[] answer = new int[sources.length];
//         // sources가 강철부대원 현재 위치 dest 가
//         // 목적지 resutl 각 부대원의 최단거리
//         //인접배열 방식으로 
//         int arr [][] = new int[n+1][n+1];
//         for (int i = 0; i <= n; i++) {
//             Arrays.fill(arr[i], 0);
// }
        
//         //체크
//         for(int i = 0; i < roads.length; i++){
//             int a = roads[i][0];
//             int b = roads[i][1];
//             arr[a][b] = 1;
//             arr[b][a] = 1;
//         }
//         for(int i = 0; i <= n; i++){
//             for(int j = 0; j < n; j++){
//                 System.out.println(arr[i][j]);
//             }
//         }
//         // destination보다 작은데 가장 큰것부터
//         for(int i : sources){
//             int idx = 0;
//             if(sources[i] != roads[idx][0])
            
//             // 부대원 위치 == 목적지면 return 0;
//             if(sources[i] == destination)answer[i] = 0;
            
//             //다 했는데 안 되면 -1
//             answer[i] = -1;
//             }

        
        
//         return answer;
//     }
// }
import java.util.*;

class Solution {
    public int[] solution(int n, int[][] roads, int[] sources, int destination) {
        int[] answer = new int[sources.length]; // 크기 지정
        int[][] arr = new int[n + 1][n + 1]; // 1-based index
        
        // 2차원 배열 초기화
        for (int i = 0; i <= n; i++) {
            Arrays.fill(arr[i], 0);
        }

        // 인접 행렬 설정 (양방향 그래프)
        for (int i = 0; i < roads.length; i++) {
            int a = roads[i][0];
            int b = roads[i][1];
            arr[a][b] = 1;
            arr[b][a] = 1;
        }

        // BFS를 이용한 최단 거리 탐색
        int[] dist = new int[n + 1];
        Arrays.fill(dist, -1); // 초기값 -1 (도달 불가)
        Queue<Integer> queue = new LinkedList<>();
        
        queue.add(destination);
        dist[destination] = 0;

        while (!queue.isEmpty()) {
            int current = queue.poll();
            
            for (int next = 1; next <= n; next++) {
                if (arr[current][next] == 1 && dist[next] == -1) { // 연결되어 있고 방문하지 않은 경우
                    dist[next] = dist[current] + 1;
                    queue.add(next);
                }
            }
        }

        // 각 sources 위치에서 목적지까지의 거리 저장
        for (int i = 0; i < sources.length; i++) {
            answer[i] = dist[sources[i]];
        }

        return answer;
    }
}
