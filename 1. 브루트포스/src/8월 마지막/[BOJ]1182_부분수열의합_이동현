package new1;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    static int n, s, cnt; // cnt는 합이 s가 되는 부분 수열의 개수
    static int[] arr;
    static boolean[] sel;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken()); // 수열의 개수
        s = Integer.parseInt(st.nextToken()); // 부분 수열의 합이 될 값
        arr = new int[n];
        sel = new boolean[n];
        
        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(st.nextToken());
        }
        
        cnt = 0;
        
        powerset(0, 0); // idx = 0부터, 현재 선택된 원소의 합을 0으로 초기화
        System.out.println(cnt);
    }
    
    public static void powerset(int idx, int sum) {
        // 기저조건
        if (idx >= n) {
            // 부분 수열의 합이 s와 일치하고, 선택된 원소가 하나 이상인 경우
            if (sum == s && isNotEmpty()) {
                cnt++;
            }
            return;
        }
        
        // 현재 원소를 선택하는 경우
        sel[idx] = true;
        powerset(idx + 1, sum + arr[idx]);
        
        // 현재 원소를 선택하지 않는 경우
        sel[idx] = false;
        powerset(idx + 1, sum);
    }
    
    // 선택된 원소가 하나라도 있는지 확인
    public static boolean isNotEmpty() {
        for (int i = 0; i < n; i++) {
            if (sel[i]) {
                return true;
            }
        }
        return false;
    }
}
